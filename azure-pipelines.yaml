trigger:
- master

stages:
- stage: "Create_Infrastructure"
  jobs:
  - job: provision
    displayName: 'Provision Infrastructure'
    pool:
      vmimage: 'ubuntu-18.04'
    steps:
    
    - task: DownloadSecureFile@1
      displayName: Download Terraform Variables file
      name: tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    
    - script: |
        sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars
      displayName: Copy terraform.tfvars File
      
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.14.8'

    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        backendServiceArm: 'terraform-sa'
        backendAzureRmResourceGroupName: 'terraform'
        backendAzureRmStorageAccountName: 'tstate6853'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.state'

    - task: TerraformTaskV1@0
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        environmentServiceNameAzureRM: 'terraform-sa'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'selenium'

- stage: Deploy
  jobs:
  - deployment: deploy_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'terraform-sa'
              appName: 'udacity-project3-app'
              appType: webApp
              package: $(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy


- stage: "Destroy_Infrastructure"
  jobs:
  - job: provision
    displayName: 'Provision Infrastructure'
    pool:
      vmimage: 'ubuntu-18.04'
    steps:
    
    - task: DownloadSecureFile@1
      displayName: Download Terraform Variables file
      name: tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    
    - script: |
        sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars
      displayName: Copy terraform.tfvars File
      
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.14.8'

    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        backendServiceArm: 'terraform-sa'
        backendAzureRmResourceGroupName: 'terraform'
        backendAzureRmStorageAccountName: 'tstate6853'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.state'

    ${{ if eq(parameters.destrory, true) }}:
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        environmentServiceNameAzureRM: 'terraform-sa'

# - stage: Build
#   jobs:
#   - job: Build
#     pool:
#       vmImage: 'ubuntu-18.04'
#     steps:
#     # Needed for Terraform VM deployment
#     # - task: InstallSSHKey@0
#     #   inputs:
#     #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
#     #     sshPublicKey: 'PUBLIC_KEY'
#     #     sshKeySecureFile: 'id_rsa'
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: 'path/to/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi
# - stage:
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-18.04'
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: ''
#               appName: ''
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


