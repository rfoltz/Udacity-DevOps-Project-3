trigger:
- master

stages:
- stage: "Create_Infrastructure"
  jobs:
  - job: provision
    displayName: 'Provision Infrastructure'
    pool:
      vmimage: 'ubuntu-18.04'
    steps:
    
    - task: DownloadSecureFile@1
      displayName: Download Terraform Variables file
      name: tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    
    - script: |
        sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars
      displayName: Copy terraform.tfvars File
      
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.14.8'

    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        backendServiceArm: 'terraform-sa'
        backendAzureRmResourceGroupName: 'terraform'
        backendAzureRmStorageAccountName: 'tstate6853'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.state'

    - task: TerraformTaskV1@0
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        environmentServiceNameAzureRM: 'terraform-sa'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'selenium'

- stage: Deploy
  jobs:
  - deployment: deploy_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'terraform-sa'
              appName: 'udacity-project3-app'
              appType: webApp
              package: $(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy
  
  - deployment: deployment_vm
    displayName: Deploy Virtual Machine
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Configure selenium
            inputs:
              targetType: 'inline'
              script: |
                pwd
                hostname
                sudo apt-get install software-properties-common -y
                sudo apt-add-repository universe -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                python3 -m pip install --upgrade pip
                pip3 install selenium
                python3 -V
                pip3 -V
                /usr/bin/chromium-browser --version
                /usr/bin/chromedriver --version



- stage: Test
  jobs:
  - job: postman_integration
    displayName: Postman Integration Tests
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    
    - task: Bash@3
      displayName: Install Newman CLI
      inputs:
        targetType: 'inline'
        script: |
          npm install -g newman
          mkdir -p output/newman/

    - task: Bash@3
      displayName: Run Regression Tests
      inputs:
        targetType: 'inline'
        script: |
          newman run automatedtesting/postman/DummyRestAPI_Regression.postman_collection.json \
           --environment automatedtesting/postman/DummyEnv.postman_environment.json \
           --suppress-exit-code \
           --delay-request 5000 \
           --reporters cli,junit --reporter-junit-export output/newman/regression.xml
    
    - task: Bash@3
      displayName: Run Data Validation Tests
      inputs:
        targetType: 'inline'
        script: |
          newman run automatedtesting/postman/DummyRestAPI_Validate.postman_collection.json \
           --environment automatedtesting/postman/DummyEnv.postman_environment.json \
           --suppress-exit-code \
           --delay-request 5000 \
           --reporters cli,junit --reporter-junit-export output/newman/validation.xml
    
    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results'
      inputs:
        testRunner: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/output/newman/'
        testResultsFiles: '*.xml'
        mergeTestResults: true
        testRunTitle: 'Integration Test Results'

  - deployment: test_vm
    displayName: Deploy and Run Selenium Tests
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Run Selenium Tests
            inputs:
              targetType: 'inline'
              script: |
                cd $(Pipeline.Workspace)/selenium
                find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
                unzip -o selenium-$(Build.BuildId).zip
                pwd
                ls -la
                sudo mkdir -p /var/log/selenium
                sudo chmod 664 /var/log/selenium
                ls -la
                sudo python3 -u tests.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                cd $(System.DefaultWorkingDirectory)
                mkdir -p log/selenium
                pwd
                sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                ls -la
          - task: PublishPipelineArtifact@1
            displayName: Publish selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'drop-selenium-logs'
# TODO: Uncomment at final stage of project
# - stage: "Destroy_Infrastructure"
#   jobs:
#   - job: provision
#     displayName: 'Provision Infrastructure'
#     pool:
#       vmimage: 'ubuntu-18.04'
#     steps:
    
#     - task: DownloadSecureFile@1
#       displayName: Download Terraform Variables file
#       name: tfvars
#       inputs:
#         secureFile: 'terraform.tfvars'
    
#     - script: |
#         sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars
#       displayName: Copy terraform.tfvars File
      
#     - task: TerraformInstaller@0
#       inputs:
#         terraformVersion: '0.14.8'

#     - task: TerraformTaskV1@0
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
#         backendServiceArm: 'terraform-sa'
#         backendAzureRmResourceGroupName: 'terraform'
#         backendAzureRmStorageAccountName: 'tstate6853'
#         backendAzureRmContainerName: 'tstate'
#         backendAzureRmKey: 'terraform.state'

#     - task: TerraformTaskV1@0
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         commandOptions: |
#           -auto-approve 
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
#         environmentServiceNameAzureRM: 'terraform-sa'

  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


